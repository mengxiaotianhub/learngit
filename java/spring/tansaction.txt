spring通过统一的事务管理来对不同的底层实现进行封装，
spring是通过aop的方式进行批量的事务管理

spring当中对于事务处理抽象出了一个接口：
public interface PlatformTransactionManager{
	TrancationStatus getTransaction(TransactionDefinition definition) throw TransactionException;
	void commit(TrancationStatus status) throw TransactionException;
	void rallback(TrancationStatus status) throw TransactionException;
}
其中jdbc对于这个接口有一个实现：DataSourceTrancationManager
Hibernate的实现是HibernateTranscationManager

在TranscationDefinition 这个类中有一些定义参数的方法：
getName:事务名称
getIsolationLevel:隔离级别
getPropagationBehavior：传播行为
getTimeout:超时时间
isReadyOnly:是否只读事务
TransactionStatus中的一些方法：
isNewTransaction:是否为新事务
hasSavepoint:是否有savepoint(诊断，NESTED)
isCompleted:是否已完成
isRollbackOnly:是否为rollback-only

传播行为：
PROPAGATION_MANDATORY
必须在事务中运行,不存在则抛异常
PROPAGATION_NEVER
不应该在事务中运行，抛异常
PROPAGATION_NOT_SUPPORTED
不应该在事务中运行，有则挂起
PROPAGATION_SUPPORTED
无所谓在不在事务中运行都可以
PROPAGATION_REQUIRED
必须在事务中执行，不存在则启动新事务，内部事务会影响外部事务
PROPAGATION_NESTED
必须在事务中执行，不存在则启动新事务，事务之间互相不影响
PROPAGATION_REQUIRES_NEW
必须在新事务中执行，挂起当前事务

声明式事务的相关配置：
shema配置：
<beans  
xmlns="http://www.springframework.org/schema/beans"  
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
xmlns:context="http://www.springframework.org/schema/context"  
xmlns:aop="http://www.springframework.org/schema/aop"  
xmlns:tx="http://www.springframework.org/schema/tx"  
xsi:schemaLocation="  
http://www.springframework.org/schema/beans        
http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
http://www.springframework.org/schema/context                
http://www.springframework.org/schema/context/spring-context-3.0.xsd
 http://www.springframework.org/schema/aop
 http://www.springframework.org/schema/aop/spring-aop-2.0.xsd
 http://www.springframework.org/schema/tx
 http://www.springframework.org/schema/aop/spring-tx.xsd">  

 定义事务管理器：
 <bean id= "xManager" class="org.springhframework.jdbc.datasurce.DataSourceTranactionManager">
<property name="dataSource" ref="dataSource"/>
</bean>

1、在xml中定义事务Advice:
<tx:advice id= "txAdvice" transaction-manager="txManager">
<tx:attributes>
<tx:method name="get*" read-oly="true"/>
<tx:method name="*"/>
</tx:attributes>
</tx:advice>
<aop:config>
<aop:pointcut id="daoOperation" expression="...."/>
<aop:advisor advice-ref="txAdvic" pointcut-ref="daoOperation"/>
</aop:config>
其中对于<tx:method>标签有以下的一些属性可以配置
name:函数的名称匹配，支持*匹配
propagation:事务传播行为
isolation:事务隔离级别
timeout:超时
read-only：是否只读事务
rollback-for:触发回滚的异常
no-rollback-for:不触发回滚的异常

2、使用annotation方式进行定义：
需要在xml文件中加入<tx:annotation-driven transaction-manager="txManager"/>
在函数级别进行如下定义：@Transactional(propagation=Propagation.REQUIRED,rollbackFor=Exception.class)
@Transactional中的一些可配置参数:
value:使用的TransactionManager
propagation:事务传播行为
isolation:事务隔离级别
timeOut:超时
readOnly：是否只读事务
rollbackFor:触发回滚的异常类对象数组
ollbackForClassName:触发回滚的异常类名称数组
noRollbackFor:不触发回滚的异常类对象数组
noRollbackForClassName：不触发回滚的异常类名称数组


整合mybatis的相关功能：
在myBatis里是通过sqlSessionFactoryBuilder,而在spring框架下通过sqlSessionFactoryBean来实现相关的功能
首先是添加myBatis-spring的相关依赖，之后是要设置sqlSessionFactoryBean的<bean>：
<bean id= "sqlSessionFactory" class="org.mybatis.spring.SqlFactoryBean">
<property name="dataSource" ref="dataSource"/>//此处设置dataSource相当于原本sqlSessionFactoryBuilder中的读取“context.xml”
<property name="configLocation" value="classpath:"/>
<property name="mapperLocations" value="classpath:"/>
</bean>
通过annotation来定义mapper：

@Select("select userId balance FROM account WHERE userId=#{userId}")
public User getUser(@Param("userId") String userId);

通过bean定义的方式定义bean Mapper:
<bean id="userMapper" class="org.myBatis.spring.mapper.MapperFactoryBean">
<property name="mapperInterface" value="com...UserMapper"/>
<property name="sqlSessionFactory" valet="sqlSessionFactory"/>
</bean>
通过自动发现的方式定义bean Mapper:
首先要再xml里面加入
<xmlns:mybatis="http://mybatis.org/schema/mybatis-spring"
xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring
http://mybatis.org/schema/mybatis-spring.xsd"
>
<mybatis:scan base-package="com.netease.course" factory-ref="sqlSessionFactory"//可选/>
或者
<bean class="org.myBatis.spring.mapper.MapperScannerConfigurer">
<property name="base-package" value="com.netease.course"/>
<property name= "sqlSessionFactory" value="sqlSessionFactory"/>//可选
</bean>

使用：
public class Sometime(){
	@Autowired
	private UserMapper userMapper

	public void .....(String userId){
	userMapper.getUser(userId);
	}
}

定义一个能操作更多东西的session：
<bean id ="sqlSession" class="org.myBatis.spring.SqlSessionTemplate">
<constructor-arg index="0" ref="sqlSessionFactory"/>
</bean>
使用：
public class Sometime(){
	@Autowired
	private SqlSession sqlSession

	public User .....(String userId){
	return (User)sqlSession.selectone("com.....UserMapper.getUser",userId);
	}
}