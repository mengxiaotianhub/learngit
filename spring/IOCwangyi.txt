容器通过业务对象和配置生成最后的可用对象。

IOC容器就是applicationContext 是属于org.springframework.context  下的spring-context

web应用场景下通过配置文件来初始化context，其他场景可以通过手动调用的方式初始化。

bean的作用域就是bean的有效范围，也就是什么时候创建什么时候销毁。通过bean里面的scope属性进行设置
一般bean的作用域有：singleton,prototype
Web场景下还有:requst,session,globalsession,application

singleton：有点类似于单例设计模式，一般情况下默认为单例模式，即在容器中同时只会存在一个bean的对应实例。
prototype：每次饮用的时候都创建一个新的实例。

bean的生命周期回调，
在初始化的时候的回调接口afterpropertiesSet()（需要耦合spring的代码）
更好的方案是通过bean里设置参数  init-method="init",之后在对应的实现类里写额外得逻辑

销毁的时候同样有两种 destory()接口和 设置destory-method="cleanup"

依赖注入方式的选择  强依赖用构造函数  可选依赖用setter方法

自动装配：
可以根据bean的名称，类型，constructor：构造函数。使用在<bean>中的Aoutwire元素值，其值有Aourwire="name/type/contructor"

Annotation:
@component:定义bean
@value:注入properties
@Autowire@Rerouse:自动装配和自动依赖 	
@PostConstruct @PreDestroy:生命周期回调
使用annotation方式配置需要增加以下标签表示annotation功能的开启和所作用的范围
 <context:component-scan base-package="com.mengxiaotian.learn.spring"/>

@component("header")（可以不设置bean名，默认为当前类名为bean名）
public class Header implements ScrewDriverInfo {
	@value("${name}")（与使用XML中的value后面的值类似）
	private String name;
	@Autowire（仅spring支持）
	private String color;
	@Rerouse（几乎所有框架都支持）
	private String size;
	｝